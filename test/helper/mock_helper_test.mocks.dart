// Mocks generated by Mockito 5.2.0 from annotations
// in mvvm_core_project/test/helper/mock_helper_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mvvm_core_project/data/dio_client.dart' as _i7;
import 'package:mvvm_core_project/data/model/base_model.dart' as _i6;
import 'package:mvvm_core_project/data/model/user/user_response.dart' as _i2;
import 'package:mvvm_core_project/data/service/user/user_service.dart' as _i4;
import 'package:mvvm_core_project/domain/model/user_dto.dart' as _i10;
import 'package:mvvm_core_project/domain/repository/user/user_repository.dart'
    as _i8;
import 'package:mvvm_core_project/utilities/failure.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeUserResponse_0 extends _i1.Fake implements _i2.UserResponse {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i4.UserService {
  MockUserService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.UserResponse> fetchUsers() => (super.noSuchMethod(
          Invocation.method(#fetchUsers, []),
          returnValue: Future<_i2.UserResponse>.value(_FakeUserResponse_0()))
      as _i5.Future<_i2.UserResponse>);
  @override
  _i5.Future<T> execute<T extends _i6.IBaseModel<dynamic>>(String? endpoint,
          {_i7.HttpMethod? method = _i7.HttpMethod.get,
          dynamic data,
          Map<String, dynamic>? queryParams,
          T? model}) =>
      (super.noSuchMethod(
          Invocation.method(#execute, [
            endpoint
          ], {
            #method: method,
            #data: data,
            #queryParams: queryParams,
            #model: model
          }),
          returnValue: Future<T>.value(null)) as _i5.Future<T>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i8.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i9.Error, List<_i10.UserDTO>>> getUers() =>
      (super.noSuchMethod(Invocation.method(#getUers, []),
              returnValue:
                  Future<_i3.Either<_i9.Error, List<_i10.UserDTO>>>.value(
                      _FakeEither_1<_i9.Error, List<_i10.UserDTO>>()))
          as _i5.Future<_i3.Either<_i9.Error, List<_i10.UserDTO>>>);
}
